PREFIX=${PREFIX:-/usr/local}
GLOB=(bin/* lib/* lib/*/* lib/*/*/* share/* man/* Bakefile COPY* README* Manifest)
TARBALL="${DIRSTACK##*/}-0.1.0.tar"
PKG_LIST=(gz zip)

source version.bk
source tarball.bk

task push {
  hosts_for_news="github fork codaset gitorious"
  hosts_for_releases="$(git remote)"
}

desc push:news "Push new changes to hosts"
task push:news {
  status "Pushing news to hosts: ${hosts_for_news// /, }"
  for remote in ${hosts_for_news}; do
    run git push ${remote} news
  done
}

desc push:release "Push a new release and all tags"
task push:release {
  status "Pushing master branch to hosts: ${hosts_for_releases// /, }"
  for remote in ${hosts_for_releases}; do
    run git push --tags ${remote} master
  done
}

desc install "Install Bash-Toolbox in ${PREFIX}"
task install {
  declare -a sources=()
  declare -a directories=()

  status "Copying libraries"
  for lib in lib/* lib/*/* lib/*/*/*; do
    test -d ${lib} && {
      run install -d ${PREFIX}/${lib}
      directories=(\${PREFIX}/${lib} ${directories[@]})
    }
    test -f ${lib} && {
      run install ${lib} ${PREFIX}/${lib}
      sources=(${sources[@]} \${PREFIX}/${lib})
    }
  done

  status "Copying shared files"
  for src in share/* share/*/* share/*/*/*; do
    test -f ${src} && {
      run install ${src} ${PREFIX}/${src}
      sources=(\${PREFIX}/${src} ${sources[@]})
    }
    test -d ${src} && {
      run install -d ${PREFIX}/${src}
      directories=(\${PREFIX}/${src} ${directories[@]})
    }
  done

  status "Copying shared files"
  for src in share/* share/*/* share/*/*/*; do
    test -d ${src} && run install -d ${PREFIX}/${src}
    test -f ${src} && run install ${src} ${PREFIX}/${src}
  done

  status "Copying binaries"
  run install -d ${PREFIX}/bin
  for bin in bin/*; do
    run install ${bin} ${PREFIX}/${bin}
    sources=(${sources[@]} \${PREFIX}/${bin})
  done
  echo "declare    PREFIX=${PREFIX}" > .uninstall
  echo "declare -a sources=(${sources[@]})" >> .uninstall
  echo "declare -a directories=(${directories[@]})" >> .uninstall
}

desc uninstall "Uninstall Bash-Toolbox"
task uninstall {
  source .uninstall
  status "Removing all files"
  for src in ${sources[@]}; do
    test -f ${src} && run rm ${src}
  done

  status "Removing empty directories"
  for dir in ${directories[@]}; do
    run rmdir ${dir}
  done
}

desc reinstall "Reinstall Bash-Toolbox"
task reinstall {
  uninstall
  install
}

# vim: filetype=sh

