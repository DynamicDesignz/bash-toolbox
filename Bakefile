source version.bk

load ${VERSION_FILE}

PREFIX=${PREFIX:-/usr/local}
PROJECT=${DIRSTACK##*/}
SOURCE=src/${PROJECT}-${VERSION[0]}
GLOB=($(git ls-files))
TARBALL="${SOURCE}.tar"
PKG_LIST=(gz zip)

task base {
  # Global constants
  BASH_TOOLBOX_PATH="${PREFIX}"
  BASH_TOOLBOX_LIB="${BASH_TOOLBOX_PATH}/lib/bash-toolbox"
  BASH_TOOLBOX_CLI="${BASH_TOOLBOX_LIB}/cli"
  BASH_TOOLBOX_SHARE="${BASH_TOOLBOX_PATH}/share/bash-toolbox"
  BASH_TOOLBOX_LOG="/tmp/bash-toolbox.log"

  return 0
}

desc config "Configure Bash-Toolbox for installation in ${PREFIX}"
task config {
  invoke base

  message --info "Setting directories and files"

  local glob=(${GLOB[@]//Bakefile})

  for i in ${!glob[@]}; do
    local regexp=""
    local source="${SOURCE}/${glob[i]}"
    status "Configuring ${source}"
      mkdir -p ${source%/*}

      regexp="${regexp};s/\${PREFIX.*}/${PREFIX//\//\\/}/g"
      regexp="${regexp};s/\${BASH_TOOLBOX_PATH.*}/${BASH_TOOLBOX_PATH//\//\\/}/g"
      regexp="${regexp};s/\${BASH_TOOLBOX_LIB.*}/${BASH_TOOLBOX_LIB//\//\\/}/g"
      regexp="${regexp};s/\${BASH_TOOLBOX_CLI.*}/${BASH_TOOLBOX_CLI//\//\\/}/g"
      regexp="${regexp};s/\${BASH_TOOLBOX_SHARE.*}/${BASH_TOOLBOX_SHARE//\//\\/}/g"
      regexp="${regexp};s/\${BASH_TOOLBOX_LOG.*}/${BASH_TOOLBOX_LOG//\//\\/}/g"

      regexp="${regexp};s/\${VERSION_TAG}/${VERSION[0]//\//\\/}/g"
      regexp="${regexp};s/\${VERSION_DATE}/${VERSION[1]//\//\\/}/g"

      sed -u "${regexp}" ${glob[i]} > ${source}
    end
  done

  return 0
}

task push {
  hosts_for_news="github"
  hosts_for_releases="$(git remote)"
}

desc push:changes "Push new changes to hosts"
task push:changes {
  for remote in ${hosts_for_news}; do
    status "Pushing changes to host: ${remote}"
      git push ${remote} changes
    end
  done
}

desc push:release "Push a new release and all tags"
task push:release {
  for remote in ${hosts_for_releases}; do
    status "Pushing master branch to host: ${remote}"
      git push --tags ${remote} master
    end
  done
}

desc install "Install Bash-Toolbox in ${PREFIX}"
task install {
  declare -a sources=()
  declare -a directories=()

  status "Copying libraries"
  for lib in lib/* lib/*/* lib/*/*/*; do
    test -d ${lib} && {
      run install -d ${PREFIX}/${lib}
      directories=(\${PREFIX}/${lib} ${directories[@]})
    }
    test -f ${lib} && {
      run install ${lib} ${PREFIX}/${lib}
      sources=(${sources[@]} \${PREFIX}/${lib})
    }
  done

  status "Copying shared files"
  for src in share/* share/*/* share/*/*/*; do
    test -f ${src} && {
      run install ${src} ${PREFIX}/${src}
      sources=(\${PREFIX}/${src} ${sources[@]})
    }
    test -d ${src} && {
      run install -d ${PREFIX}/${src}
      directories=(\${PREFIX}/${src} ${directories[@]})
    }
  done

  status "Copying shared files"
  for src in share/* share/*/* share/*/*/*; do
    test -f ${src} && {
      run install ${src} ${PREFIX}/${src}
      sources=(\${PREFIX}/${src} ${sources[@]})
    }
    test -d ${src} && {
      run install -d ${PREFIX}/${src}
      directories=(\${PREFIX}/${src} ${directories[@]})
    }
  done

  status "Copying binaries"
  run install -d ${PREFIX}/bin
  for bin in bin/*; do
    run install ${bin} ${PREFIX}/${bin}
    sources=(${sources[@]} \${PREFIX}/${bin})
  done
  echo "declare    PREFIX=${PREFIX}" > .uninstall
  echo "declare -a sources=(${sources[@]})" >> .uninstall
  echo "declare -a directories=(${directories[@]})" >> .uninstall
}

desc uninstall "Uninstall Bash-Toolbox"
task uninstall {
  source .uninstall
  status "Removing all files"
  for src in ${sources[@]}; do
    test -f ${src} && run rm ${src}
  done

  status "Removing empty directories"
  for dir in ${directories[@]}; do
    run rmdir ${dir}
  done
}

desc reinstall "Reinstall Bash-Toolbox"
task reinstall {
  invoke uninstall
  invoke install
}

default config

# vim: filetype=sh

