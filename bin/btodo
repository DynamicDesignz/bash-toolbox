#!/usr/bin/env bash-toolbox
#$ Usage: btodo [-f] [TODO_FILE] [TODO_NAME] ...
#$        btodo [TODO_NAME] ...
#$        btodo [OPTIONS] ...
#$
#$ Make a specific stack of commands invoking by name.
#$
#$ Options:
#$   -f   Specified a todo file.
#$   -l   List todo titles.
#$   -h   Display this message.
#$   -v   Display version.
#$

#: btodo(1) -- bash-toolbox todo runner
#: ====================================
#:
#: ## SYNOPSIS
#:
#: `btodo` [-f] [TODO_FILE] [TODO_NAME] ...
#: `btodo` [TODO_NAME] ...
#: `btodo` [OPTIONS] ...
#:
#: ## DESCRIPTION
#:
#: `btodo` handle command lists defined in `Todofile` or `todofile`.
#:
#: Example of the _Todofile_ contents:
#:
#:     = Build homepage and documentation
#:
#:       : Creating homepage and documentation directories
#:         + mkdir -p homepage/doc/api
#:
#:       : Building API
#:         + markdown doc/api.mkd -o homepage/doc/api/index.html
#:
#:       : Building documentation
#:         + markdown README.mkd -o homepage/index.html
#:         + markdown doc/faq.mkd -o homepage/doc/faq.html
#:         + markdown doc/howto.mkd -o homepage/doc/howto.html
#:
#: ## AUTHOR
#:
#: Written by Hallison Batista &lt;hallison@codigorama.com&gt;
#:
#: Timestamp
#: : 2010-01-08 17:59:17 -04:00
#:
#: ## COPYRIGHT
#:
#: Copyright (C) 2009-2010 Codigorama &lt;code@codigorama.com&gt;
#:
#: ## SEE ALSO
#:
#: `btodo(7)`, `btake(1)`
#:

source btodo.sh

function list {
  test "${todo_titles[*]}" && {
    echo "Todo list found"
    for i in ${!todo_titles[@]}; do
      printf "  %02d: %-72s\n" ${i} "${todo_titles[i]}"
      i=i+1
    done
  } || {
    echo "No todo list defined"
  }

  return 0
}

function todo {
  declare -a todolist=${!todo_titles[@]}

  test ${#} -gt 0 && todolist=${@}

  for item in ${todolist}; do
    defined ${item} && {
      dump "${item}"
    } || {
      fail "todo item not defined: '${stack}'"
      fail "todo item is required, try '-l' to list all itens in todo list"
    }
  done

  return 0
}

function btodo {

  while getopts ":f:lhvd" option; do
    case ${option} in
      f ) todo_file=${OPTARG} ;;
      l ) list=yes ;;
      h ) usage && exit 0 ;;
      v ) usage && exit 0 ;;
      : ) fail "argument is required" && exit 1 ;;
      - ) shift $((${OPTIND} - 1)); break ;;
      * ) fail "invalid argument '${OPTARG}', try -h for usage."; exit 1 ;;
    esac
  done

  shift $((${OPTIND} - 1))

  test -z "${todo_file}" && {
    fail "the file of todo list was not found"
    exit 1
  }

  source ${todo_file}

  test ${list} && list && return 0

  test ${#} -gt 0 && todo ${@} || todo

  return 0
}

btodo ${@}

exit ${?}

# vim: filetype=sh

